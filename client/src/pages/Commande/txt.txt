import React, { useState } from 'react'
import { RiBankCardFill, RiPaypalFill } from 'react-icons/ri';
import { useNavigate } from 'react-router-dom';
import InputCard from '../../components/input/InputCard';
import './commande.css'

import axios from 'axios';

import { GetGlobalData } from '../../useContext/AuthProviders';
import { Trash } from '../../components/panier/trash';

export const Commande = () => {
      const {contextStore, contextTotal,contextUser} = GetGlobalData();
      const [store, setStore] = contextStore;
      const [total] = contextTotal;
      const [user] = contextUser

   
const token = localStorage.getItem("token");

  const [name, setName] = useState('');
  const [firstname, setFirstname] = useState('');
  const [adress, setAdress] = useState('');
  const [city, setCity] = useState('');
  const [zip, setZip] = useState('');
  const [email, setEmail] = useState('');
  const [country, setCountry] = useState('');
  const [cardName, setCardName] = useState('');
  const [cardNumber, setCardNumber] = useState('');
  const [month, setMonth] = useState('');
  const [year, setYear] = useState('');
  const [cardCvc, setCvc] = useState('');

  const [isSave, setIsSave] = useState(false);

  const navigate = useNavigate()

console.log(user)
  const inputName = [
    {

      type: 'text', id: 'name', for: 'Prénom', placeholder: 'Prénom', value: name, change: (e) => setName(e.target.value)

    },
  ]
  const inputEmail = [
    {

      type: 'text', id: 'name', for: 'Email', placeholder: 'Email', value: email, change: (e) => setEmail(e.target.value)

    },
  ]
  const inputFName = [
    {

      type: 'text', id: 'name', for: 'name', placeholder: 'Nom', value: firstname, change: (e) => setFirstname(e.target.value)

    },
  ]

  const inputAdress = [
    {

      type: 'text', id: 'adress', for: 'adress', placeholder: 'Adresse de Livraison', value: adress, change: (e) => setAdress(e.target.value)

    }
  ]

  const inputZip = [
    {
      type: 'text', id: 'zip', for: 'zip', placeholder: 'Code Postale', value: zip, change: (e) => setZip(e.target.value)
    },
  ]

  const inputNameCard = [
    {
      type: 'text', id: 'nameCard', for: 'nameCard', placeholder: 'name card', value: user?.card?.name , change: (e) => setCardName(e.target.value)
        }
  ]

  const InputCvc = [
    {
      type: 'text', id: 'cvc', for: 'cvc', placeholder: 'cvc', value: cardCvc, change: (e) => setCvc(e.target.value)
    }
  ]
  const InputCardNumber = [
    {
      type: 'text', id: 'number', for: 'number', placeholder: 'number', value: user?.card?.number, change: (e) => setCardNumber(e.target.value)
    }
  ]

  const InputCity = [
    {
      type: 'text', id: 'city', for: 'city', placeholder: 'Ville', value: city, change: (e) => setCity(e.target.value)
    },
  ]
  const InputCountry = [
    {
      type: 'text', id: 'Pays', for: 'Pays', placeholder: 'Pays', value: country, change: (e) => setCountry(e.target.value)
    },

  ]
  const InputMonth = [
    {
      type: 'text', id: 'month', for: 'month', placeholder: 'month', value: month, change: (e) => setMonth(e.target.value)
    },
  ]
  const InputYear = [
    {
      type: 'text', id: 'year', for: 'year', placeholder: 'year', value: year, change: (e) => setYear(e.target.value)
    }
  ]



  const handleChange = event => {
    if (event.target.checked) {
      console.log('Checkbox is checked');
      console.log(name)
    } else {
      console.log('Checkbox is NOT checked');
    }
    setIsSave(current => !current);
  };
  

    const callAPI = () => { 
      if(isSave){
        var data = JSON.stringify({
          "name": cardName,
          "number": cardNumber,
          "month": month,
          "year": year,
        "cvc": cardCvc
      });
      
      var config = {
        method: 'post',
        url: 'https://localhost:8000/api/payment',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        data : data
      };
      
      axios(config)
      .then(function (response) {
        console.log(JSON.stringify(response.data));
        alert('Merci pour votre commande')
      })
      .catch((error) => {
          console.log(error)
          alert('Merci pour votre commande')
        });
      } else {

        console.log("Vous n'avez pas acceptez")
        
      }
      }


  return (

    <div className='body mt-7'>
    <div>
   <div className="flow-root scrollY ">
              <ul role="list" className="-my-6 divide-y divide-gray-200">
                {store.map((product, key) => (
                  <li key={key} className="py-6 flex space-x-6">
                    <img
                      src={product.photo}
                      alt='produit'
                      className="flex-none w-24 h-24 object-center object-cover bg-gray-100 rounded-md"
                    />
                    <div className="flex-auto">
                      <div className="space-y-1 sm:flex sm:items-start sm:justify-between sm:space-x-6">
                        <div className="flex-auto text-sm font-medium space-y-1">
                          <div className="text-gray-900">
                            <p>{product.titre}</p>
                          </div>
                          <p className="text-gray-900">{product.prix + "€"}</p>
                         
                          <p className="hidden text-gray-500 sm:block">{product.quantity}</p>
                        </div>
                        <div className="flex-none flex space-x-4">
                          <div className="flex border-l border-gray-300 pl-4">
                            <button onClick={() => Trash(product.id, setStore, store)} type="button" className="text-sm font-medium  hover:text-indigo-500">
                                Remove
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>

            <dl className="text-sm font-medium text-gray-500 mt-10 space-y-6 pr-5">
              <div className="flex justify-between">
                <dt>Subtotal</dt>
                <dd className="text-gray-900">{total}</dd>
              </div>
              <div className="flex justify-between">
                <dt>Shipping</dt>
                <dd className="text-gray-900">{user?.card?.number}</dd>
              </div>
              <div className="flex justify-between border-t border-gray-200 text-gray-900 pt-6">
                <dt className="text-base">Total</dt>
                <dd className="text-base">{total}</dd>
              </div>
            </dl>
          </div>

      <article className="cardCommand  max-h-full ">
        <div className="containerCard ">
 
          <div className="card-body">
            
            <div className=" flexin justify-space-between">
              <div className="column billing">
                <div className="title">
                  <h1>Vos infos </h1>
                </div>

                
<form class="w-full max-w-lg">
  <div class="flex flex-wrap -mx-3 mb-6">
    <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">

      {inputFName.map((input, key) => (
                    <InputCard key={key} className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-red-500 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
    </div>
    <div class="w-full md:w-1/2 px-3">
      {inputName.map((input, key) => (
                    <InputCard key={key}  className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
    </div>
  </div>
  <div class="flex flex-wrap -mx-3 mb-6">
    <div class="w-full px-3">
      {inputEmail.map((input, key) => (
                    <InputCard key={key} className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
    </div>
    <div class="w-full px-3">
      {inputAdress.map((input, key) => (
                      <InputCard key={key}  className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.tycommandepe} value={input.value} placeholder={input.placeholder} change={input.change} />
                    ))}
    </div>
  </div>
  <div class="flex flex-wrap -mx-3 mb-2">
    <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
      {InputCity.map((input, key) => (
                      <InputCard key={key}  className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.tycommandepe} value={input.value} placeholder={input.placeholder} change={input.change} />
                    ))}
    </div>
    <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
      {InputCountry.map((input, key) => (
                      <InputCard key={key}  className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.tycommandepe} value={input.value} placeholder={input.placeholder} change={input.change} />
                    ))}
    </div>
    <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
  
      {inputZip.map((input, key) => (
                    <InputCard key={key}  className='input appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
    </div>
  </div>
</form>

              
              </div>

              {/* <div className="column shipping">
                <div className="title">
                  <div className="num">2</div>
                  <h4>Entrez les informations de votre carte</h4>
                </div>
                <div className='field full'>
                  {inputNameCard.map((input, key) => (
                    <InputCard key={key}  className='input' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
                </div>
                <div className='field full'>
                  {InputCardNumber.map((input, key) => (
                    <InputCard key={key}  className='input' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
                </div>
                <div className="flexin justify-space-between">
                  <div className='field half'>
                    {InputMonth.map((input, key) => (
                      <InputCard key={key}  className='input' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                    ))}
                  </div>
                  <div className='field half'>
                    {InputYear.map((input, key) => (
                      <InputCard key={key}  className='input' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                    ))}
                  </div>
                </div>
                <div className='field full'>
                  {InputCvc.map((input, key) => (
                    <InputCard key={key}  className='input' type={input.type} value={input.value} placeholder={input.placeholder} change={input.change} />
                  ))}
                </div>
              </div>*/}
            </div>
          </div> 

              <div className='mt-5 mb-5'>
              <input type="checkbox" id="save" name="save" value={isSave} onChange={handleChange}/>
              <label htmlFor="save"> Souhaitez-vous enregistrez vos données ?</label>
              </div>
          <div className="card-actions flex justify-between">
            <div className="flex-start">
              <p onClick={()=> navigate("/home") } className="button button-secondary">Retourner sur le store</p>
            </div>
            <div className="flex-end">
              {/* <button className="button button-link">Back to Shipping</button> */}
              <button  onClick={()=> navigate("/paiementType") }  className="button button-primary">Proceder au paiement</button>
            </div>
          </div>
        </div>
      </article>
    </div>
  )
}
